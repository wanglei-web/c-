%%%%%%1%%%%%%

#include<iostream>
#include<vector>
using namespace std;

class Solution{
public:
  int search(vector<int>& nums,int target){
    int left=0;
    int right=nums.size()-1;
    while(left<=right){
      int middle=left+(right-left)/2;
      if(nums[middle]>target){
        right=middle-1;
      }else if(nums[middle]<target)
      {
        left=middle+1;
      }else{
        return middle;
      }
    }
    return -1;
  }
};

int main(){
  vector<int> temp={0,1,3,4,5,6,7};
  int target1=3;
  int target2=2;
  Solution solution;
  cout<<solution.search(temp,target1)<<endl;
  
}

%%%%%%2%%%%%%

#include<iostream>
#include<vector>
using namespace std;

class Solution{
public:
  int search(vector<int>& nums){
    int result=INT_MIN;
    int count=nums.size();
    vector<int> temp(count,0);
    temp[0]=nums[0];
    for(int i=1;i<count;i++){
        if(temp[i-1]<0)
            temp[i]=nums[i];
        else 
            temp[i]= temp[i-1]+nums[i];
        
        result=max(result,temp[i]);
       
    }
    return result;
  }
};

int main(){
  vector<int> temp1={1,-4,10,5,-10,23};
  vector<int> temp2={2,-10,4,9,-29,10};

  Solution solution;
  cout<<solution.search(temp2)<<endl;
  
}

%%%%%%3%%%%%%


#include<iostream>
#include<vector>
#include<math.h>
using namespace std;

class Solution{
public:
  int search(int target){
    int sum=1;
    int root=round(sqrt(target));
    for(int i=2;i<=root;i++){
        int n=target/i;
        if(n*i==target)
           sum+=n+i;  
    }
    if(root*root==target)
           sum-=root;  
    return sum==target;
  }
};

int main(){
    int target1=28;
    int target2=15;
    Solution solution;
    cout<<solution.search(target2)<<endl;
  
}

%%%%%%4%%%%%%


#include<iostream>
#include<vector>
#include<math.h>
#include<algorithm>
using namespace std;

class Solution{
public:
  vector<vector<int>> search(vector<int>& nums,int target){
    vector<vector<int>> result;
    if(nums.size()<4) return{};
    sort(nums.begin(),nums.end());
    int length=nums.size();
    for(int i=0;i<length-3;i++){
        if(i>0&&nums[i]==nums[i-1])
           continue;
        for(int j=i+1;j<length-2;j++){
            if(j>i+1&& nums[j]== nums[j-1])
            continue;
            int left=j+1,right=length-1;
            while(left<right){
                int sum=nums[i]+nums[j]+nums[left]+nums[right];
                if(sum==target){
                    result.push_back({nums[i],nums[j],nums[left],nums[right]});
                    while(left<right&&nums[left]==nums[left+1])
                        left++;
                    while(left<right&&nums[right]==nums[right-1])
                        right--;  
                    left++;
                    right--;  
                }else if(sum<target){
                    left++;
                }
                else{
                    right--;  
                }

            }
        }
    }
   
    return result;
  }
};

int main(){
    vector<int> temp1={1,0,-1,0,-2,2};
    int target1=0;
    vector<int> temp2={2,2,2,2,2};
    int target2=8;
    Solution solution;
    vector<vector<int>> result=solution.search(temp2,target2);
    for(int i=0;i<result.size();i++){
        for(int j=0;j<4;j++){
        cout<<result[i][j]<<" ";
        }
        cout<<endl;
    }
}